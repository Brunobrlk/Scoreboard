name: CI/CD - Lint, Test, Build and Deploy

on:
  pull_request:
    branches: [ "master" ]

  # push:
  #   paths:
  #     - '.github/workflows/*'

  workflow_dispatch:

env:
  GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
  DEV_SERVICE_ACCOUNT: ${{ secrets.DEV_SERVICE_ACCOUNT }}
  RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
  GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
  LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Lint check
        run: ./gradlew lintRelease

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Unit Tests
        run: ./gradlew testReleaseUnitTest

      - name: Store test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: app/build/reports/tests

  integration-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Store test results
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-report
          path: app/build/reports/androidTests

  build-apk:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, integration-test]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate release APK
        run: ./gradlew assembleRelease

      - name: Store AAB and APK files
        uses: actions/upload-artifact@v4
        with:
          name: apk-artifacts
          path: |
            app/build/outputs/apk/release/*.apk
            app/build/outputs/mapping/release/mapping.txt
            app/build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib

  build-aab:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, integration-test]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Generate release AAB
        run: ./gradlew bundleRelease

      - name: Store AAB and APK files
        uses: actions/upload-artifact@v4
        with:
          name: aab-artifacts
          path: |
            app/build/outputs/bundle/release/*.aab
            app/build/outputs/mapping/release/mapping.txt
            app/build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib

  deploy-playstore:
    runs-on: ubuntu-latest
    needs: build-aab
    steps:
      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          chmod +x setup_environment
          ./setup_environment

      - uses: actions/download-artifact@v4
        with:
          name: aab-artifacts

      - name: Get Version
        id: versionName
        run: echo VERSION_NAME="v$(grep 'versionName =' build.gradle.kts | head -1 | awk -F\" '{ print $2 }')" >> $GITHUB_OUTPUT

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: app/dev-service-account.json
          releaseName: ${{ steps.versionName.outputs.VERSION_NAME }}
          packageName: com.bgbrlk.scoreboardbrlk
          releaseFiles: outputs/bundle/release/*.aab
          track: internal
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: outputs/mapping/release/mapping.txt
          debugSymbols: intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib

  deploy-amazon-appstore:
    runs-on: ubuntu-latest
    needs: build-apk
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: apk-artifacts

      - uses: galonga/upload-amazon-appstore@v1.0.2
        with:
          clientId: ${{secrets.AMAZON_APPSTORE_CLIENT_ID}}
          clientSecret: ${{secrets.AMAZON_APPSTORE_CLIENT_SECRET}}
          appId: ${{ secrets.AMAZON_APPSTORE_APP_ID }}
          apkFile: outputs/apk/release/*.apk
